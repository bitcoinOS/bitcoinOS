type BitcoinNetwork = variant { mainnet; regtest; testnet };
type BoxRecord = record {
  fund_count : nat64;
  box_status : BoxStatus;
  box_id : nat64;
  user_id : principal;
  reward_mode : opt RewardMode;
  boost_card_count : nat64;
  create_time : nat64;
  point : nat64;
  og_count : nat64;
  open_time : nat64;
  box_type : RewardType;
};
type BoxRecordResponse = record {
  fund_count : nat64;
  open_count : nat64;
  user_id : principal;
  boost_card_count : nat64;
  box_point : nat64;
  og_count : nat64;
};
type BoxRewardRecord = record {
  fund_count : nat64;
  update_time : nat64;
  network : BitcoinNetwork;
  user_id : principal;
  max_box_id : nat64;
  total_box_count : nat64;
  boost_card_count : nat64;
  create_time : nat64;
  box_point : nat64;
  og_count : nat64;
  unopen_box_count : nat64;
};
type BoxStatus = variant { Open; Close };
type ConfigSetting = record {
  sat_per_point : nat64;
  update_time : nat64;
  invite_point_rate : nat64;
  create_time : nat64;
  invite_point_per_user : nat64;
  reward_period : nat64;
  base_point_per_box : nat64;
  max_rand_box_point : nat64;
};
type Error = variant {
  StableWriteError : record { msg : text };
  UserUnInit : principal;
  ConfirmStakeError : record { principal; text };
  GetStakingPoolAddressFailed : record { msg : text };
  CandidEncodeError : text;
  BoxOpenError : record { principal; nat64 };
  UnAuthorized : text;
  WalletNotFound : text;
  BoxHasExists : record { principal; nat64 };
  CreateCanisterFailed : record { msg : text };
  StableSetError : record { msg : text };
  Unknown;
  ConfirmStakingError : text;
  StakingPoolAlreadyExists : record { staking_pool_id : text };
  BoxHasOpen : record { principal; nat64 };
  BoxNotExists : record { principal; nat64 };
  BoxRewardHasExists : record { principal; nat64 };
  RedeemedStakingError : text;
};
type InitPointArgument = record {
  os_canister : principal;
  network : BitcoinNetwork;
  steward_canister : principal;
  task_period : nat64;
  siwb_canister : opt principal;
};
type InviteRewardRecord = record {
  invited_points : nat64;
  avalable_invite_count : nat64;
  update_time : nat64;
  network : BitcoinNetwork;
  user_id : principal;
  create_time : nat64;
  invite_status : InviteStaus;
  total_invite_count : nat64;
  invite_user_id : opt principal;
};
type InviteStaus = variant { Init; Confirmed; UnInvited };
type LeaderBoardStatus = record {
  update_time : nat64;
  min_rank : nat64;
  total_user : nat64;
  max_point : nat64;
  min_point : nat64;
  total_user_gt_zero : nat64;
};
type Metadata = record {
  os_canister : principal;
  network : BitcoinNetwork;
  steward_canister : principal;
  siwb_canister : opt principal;
  updated_time : nat64;
};
type NftRecordRequest = record {
  nft_price : nat64;
  user_id : principal;
  nft_count : nat64;
};
type NftRewardRecord = record {
  staked_nft_count : nat64;
  stake_nft_point : nat64;
  stake_nft_point_update_at : nat64;
  update_time : nat64;
  network : BitcoinNetwork;
  user_id : principal;
  create_time : nat64;
  boost_rate : nat64;
};
type PriceRecord = record {
  message : text;
  updated_time : nat64;
  price : nat64;
};
type Result = variant { Ok : bool; Err : text };
type Result_1 = variant { Ok : bool; Err : Error };
type Result_2 = variant { Ok : BoxRecordResponse; Err : Error };
type Result_3 = variant { Ok : TimerSettings; Err : text };
type Reward = record {
  twiter : opt text;
  invite_user : opt principal;
  user_id : principal;
  reward_type : RewardType;
  reward_status : RewardStaus;
  create_time : nat64;
};
type RewardMode = variant { Fixed; Random };
type RewardRecord = record {
  user_type : UserType;
  rank : nat64;
  update_time : nat64;
  total_point : nat64;
  network : BitcoinNetwork;
  user_id : principal;
  create_time : nat64;
};
type RewardStaus = variant { Init; Confirmed };
type RewardType = variant { Login; Share; Stake; Bind; RedPacket; Invite };
type StakeRecordRequest = record { sat : nat64; user_id : principal };
type StakeRewardRecord = record {
  stake_point : nat64;
  update_time : nat64;
  network : BitcoinNetwork;
  last_stake_reward_at : nat64;
  stake_type : StakingType;
  user_id : principal;
  create_time : nat64;
  stake_point_update_at : opt nat64;
  last_stake_ammount : opt nat64;
  stake_amount : nat64;
  last_stake_at : nat64;
};
type StakingType = variant { OSWallet; BTCWallet };
type TimerSettings = record {
  save_point_in_secs : nat64;
  update_leaderboard_in_secs : nat64;
  update_btc_price_in_secs : nat64;
  create_staking_record_in_secs : nat64;
};
type TimerSettingsRequest = record {
  save_point_in_secs : opt nat64;
  update_leaderboard_in_secs : opt nat64;
  update_btc_price_in_secs : opt nat64;
  create_staking_record_in_secs : opt nat64;
};
type UserStat = record { user_count : nat; day : nat64 };
type UserType = variant { II; Wallet };
service : (InitPointArgument) -> {
  add_admin : (principal) -> (bool);
  add_reward : (Reward) -> (Result);
  add_user_point : (principal, nat64) -> (bool);
  confirm_stake_record : (principal) -> (Result_1);
  counter : () -> (nat64) query;
  get_all_admins : () -> (vec principal) query;
  get_all_user_reward : () -> (vec RewardRecord) query;
  get_all_user_stake_nft_reward : () -> (vec NftRewardRecord) query;
  get_all_user_stake_reward : () -> (vec StakeRewardRecord) query;
  get_btc_price : () -> (PriceRecord) query;
  get_config : () -> (ConfigSetting) query;
  get_leader_board : () -> (vec RewardRecord) query;
  get_leader_board_status : () -> (LeaderBoardStatus) query;
  get_metadata : () -> (Metadata) query;
  get_stake_leader_board : () -> (vec StakeRewardRecord) query;
  get_timer_settings : () -> (TimerSettings) query;
  get_user_box_reward : (principal) -> (opt BoxRewardRecord) query;
  get_user_close_boxes : (principal) -> (opt vec BoxRecord) query;
  get_user_invite_reward : (principal) -> (opt InviteRewardRecord) query;
  get_user_open_boxes : (principal) -> (opt vec BoxRecord) query;
  get_user_reward : (principal) -> (nat64) query;
  get_user_stake_nft_reward : (principal) -> (opt NftRewardRecord) query;
  get_user_stake_reward : (principal) -> (opt StakeRewardRecord) query;
  get_user_stat : () -> (vec UserStat) query;
  init_user : (record { principal; UserType }) -> (bool);
  is_admin : (principal) -> (bool) query;
  open_all_box : (principal) -> (Result_2);
  open_one_box : (principal, nat64) -> (Result_2);
  remove_admin : (principal) -> (bool);
  set_steward_canister : (principal) -> (text);
  update_all_nft_reward : (vec NftRecordRequest) -> (bool);
  update_config : (ConfigSetting) -> ();
  update_nft_reward : (NftRecordRequest) -> (bool);
  update_timer_config : (TimerSettingsRequest) -> (Result_3);
  update_user_stake_reward : (StakeRecordRequest) -> (bool);
  wallet_counter : () -> (nat64) query;
}
