type Action = variant { Delete; Create };
type BindRequest = record {
  wallet_address : principal;
  sig_message : opt text;
  account : opt blob;
  wallet_type : BindWalletType;
};
type BindWalletStatus = variant { Binded; Unbind; Unknown };
type BindWalletType = variant { BTC; ICP };
type BitcoinNetwork = variant { mainnet; regtest; testnet };
type CanisterModuleInfo = record {
  canister_id : principal;
  created_at : nat64;
  canister_name : text;
};
type CreateStakingPoolRequest = record {
  status : text;
  name : text;
  description : text;
  end_time : nat64;
  duration_in_day : nat64;
  start_time : nat64;
  fund_management : text;
  minimum_stake_amount : opt nat64;
  boost_rate : opt nat64;
  annual_interest_rate : nat16;
};
type DBankInfo = record {
  start_seq_in_os : nat64;
  status : DBankStatus;
  owner : principal;
  name : text;
  dbank_canister : principal;
  network : BitcoinNetwork;
  created_at : nat64;
  steward_canister : principal;
  current_seq_in_os : nat64;
  dbank_id : nat64;
  max_wallet_limit : nat32;
};
type DBankStatus = variant { Inactive; Activing; Forbbiden };
type Error = variant {
  UnBindWallet : text;
  UserNotExists : record { user_id : principal };
  CanisterNotExists : record { canister_name : text };
  StakingRecordAlreadyExists : text;
  BindWalletLimited : record {};
  StableWriteError : record { msg : text };
  InviteCodeError : record { code : text };
  InvitedCodeHasExists : record { user_id : principal };
  UnvalidParam : record { message : text };
  InviteCodeHasExists : record { code : text };
  RewardTimeIn24Hour : record { time : nat64 };
  GetStakingPoolAddressFailed : record { msg : text };
  CandidEncodeError : text;
  BindWalletError : text;
  WalletAlreadyExists : record { wallet_canister : text };
  UnAuthorized : text;
  InviteCodeNotExists : record { code : text };
  WalletNotFound : text;
  CreateCanisterFailed : record { msg : text };
  CanisterAlreadyExists : record { canister_name : text };
  UserExists : record { user_id : principal };
  StableSetError : record { msg : text };
  Unknown;
  ConfirmStakingError : text;
  StakingPoolAlreadyExists : record { staking_pool_id : text };
  RedeemedStakingError : text;
};
type FundManagement = variant { Locktime; Transfer };
type InitArgument = record {
  network : BitcoinNetwork;
  dbank_cycles : opt nat64;
  steward_canister : principal;
  wallet_cycles : opt nat64;
};
type Metadata = record {
  network : BitcoinNetwork;
  dbank_cycles : opt nat64;
  steward_canister : principal;
  wallet_cycles : nat64;
};
type PoolStatus = variant {
  Terminated;
  Inactive;
  Suspended;
  Activing;
  Completed;
};
type RegisterStakingPoolRequest = record {
  status : text;
  bitcoin_address : text;
  name : text;
  description : text;
  end_time : nat64;
  duration_in_day : nat64;
  start_time : nat64;
  fund_management : text;
  staking_pool_canister : principal;
  minimum_stake_amount : opt nat64;
  boost_rate : opt nat64;
  annual_interest_rate : nat16;
};
type Result = variant { Ok : bool; Err : Error };
type Result_1 = variant { Ok : StakingPoolInfo; Err : Error };
type Result_2 = variant { Ok : principal; Err : Error };
type Result_3 = variant { Ok; Err : text };
type Result_4 = variant { Ok : UserInfo; Err : Error };
type Result_5 = variant { Ok : nat64; Err : Error };
type Result_6 = variant { Ok : WalletInfo; Err : Error };
type StakingPoolInfo = record {
  status : PoolStatus;
  bitcoin_address : text;
  os_canister : principal;
  name : text;
  network : BitcoinNetwork;
  description : text;
  created_at : nat64;
  end_time : nat64;
  duration_in_day : nat64;
  steward_canister : principal;
  start_time : nat64;
  fund_management : FundManagement;
  staking_pool_canister : principal;
  minimum_stake_amount : opt nat64;
  boost_rate : opt nat64;
  annual_interest_rate : nat16;
};
type StakingRecord = record {
  status : StakingStatus;
  redeemed_txid : opt text;
  sender_address : text;
  staking_address : text;
  memo : opt text;
  txid : text;
  network : BitcoinNetwork;
  stake_type : StakingType;
  sender : principal;
  duration_in_day : nat64;
  actual_amount : nat64;
  staking_canister : principal;
  fund_management : FundManagement;
  sent_time : nat64;
  sent_amount : nat64;
  sender_canister : principal;
  updated_time : nat64;
  annual_interest_rate : nat16;
};
type StakingStatus = variant { Redeemed; Redeeming; Confirmed; Pending };
type StakingType = variant { OSWallet; BTCWallet };
type UpdateBitcoinAddressRequest = record {
  bitcoin_address : text;
  canister_id : principal;
};
type UpdateStakingPoolInfoRequest = record {
  status : text;
  name : text;
  description : text;
  end_time : nat64;
  duration_in_day : nat64;
  start_time : nat64;
  fund_management : FundManagement;
  staking_pool_canister : principal;
  annual_interest_rate : nat16;
};
type UpdateStakingPoolInfoResponse = record {
  status : PoolStatus;
  name : text;
  description : text;
  end_time : nat64;
  duration_in_day : nat64;
  start_time : nat64;
  fund_management : FundManagement;
  annual_interest_rate : nat16;
};
type UpdateStakingPoolStatusRequest = record {
  status : text;
  staking_pool_canister : principal;
};
type UserInfo = record {
  seq : nat;
  primary_wallet : opt principal;
  user_desc : opt text;
  updated_at : nat64;
  user_type : UserType;
  user_img : opt text;
  name : opt text;
  wallet_address : opt text;
  network : BitcoinNetwork;
  invite_code : text;
  last_reward_at : nat64;
  created_at : nat64;
  user_status : UserStatus;
  user_id : principal;
  last_login_at : nat64;
  invited_code : opt text;
};
type UserProfileRequest = record {
  user_name : text;
  user_id : principal;
  image_link : text;
};
type UserRequest = record {
  user_desc : opt text;
  user_type : UserType;
  user_img : opt text;
  sign_message : opt text;
  name : opt text;
  wallet_address : opt text;
  user_id : principal;
  invited_code : opt text;
};
type UserStatus = variant { Inactive; Active; Forbbiden };
type UserType = variant { II; Wallet };
type WalletAction = record {
  action : Action;
  operator : principal;
  op_time : nat64;
};
type WalletBindInfo = record {
  bind_time : nat64;
  wallet_address : text;
  wallet_account : opt blob;
  user_id : principal;
  unbind_time : nat64;
  bind_status : BindWalletStatus;
  wallet_type : BindWalletType;
};
type WalletInfo = record {
  wallet_canister : principal;
  bitcoin_address : text;
  owner : principal;
  mode : opt WalletMode;
  name : text;
  network : BitcoinNetwork;
  created_at : nat64;
  steward_canister : principal;
};
type WalletMode = variant { Shared; Idenpendent };
service : (InitArgument) -> {
  add_controller : (principal, vec principal) -> (Result);
  add_image_link : (text) -> ();
  bind_wallet : (BindRequest) -> (Result);
  canister_id : (text) -> (opt CanisterModuleInfo) query;
  check_wallet_bind_status : (principal, text) -> (bool) query;
  count_staking_pool : () -> (nat) query;
  count_wallet : () -> (nat64) query;
  create_staking_pool_canister : (CreateStakingPoolRequest) -> (Result_1);
  create_wallet_canister : (text) -> (Result_2) query;
  current_dbank : () -> (opt DBankInfo) query;
  get_bind_wallets_by_user : (principal) -> (opt vec WalletBindInfo) query;
  get_image_link : () -> (vec text) query;
  get_staking_record : (text) -> (opt StakingRecord) query;
  get_user_by_code : (text) -> (opt principal) query;
  get_user_id_by_wallet : (text) -> (Result_2);
  get_user_info : (principal) -> (opt UserInfo) query;
  get_wallet_action : (nat64) -> (opt WalletAction) query;
  install_staking_pool_wasm : (principal, bool) -> (Result_3);
  list_dbank : () -> (vec DBankInfo) query;
  list_staking_pool : () -> (vec StakingPoolInfo) query;
  list_staking_record : () -> (vec StakingRecord) query;
  list_wallet : () -> (vec WalletInfo) query;
  list_wallet_type : () -> (vec text) query;
  login_or_create : (UserRequest) -> (Result_4);
  metadata : () -> (Metadata) query;
  my_wallets : () -> (vec WalletInfo) query;
  register_canister_module : (text, principal) -> (Result);
  register_staking_pool : (RegisterStakingPoolRequest) -> (Result_1);
  remove : (principal) -> ();
  remove_invited : (principal) -> ();
  set_wallet_cycles : (nat64) -> (Result_5);
  timestamp : () -> (nat64) query;
  total_user_count : () -> (nat) query;
  tvl : () -> (nat64) query;
  tvl_of : (principal) -> (nat64) query;
  unbind_wallet : (BindRequest) -> (Result);
  update_invited_code : (principal, text) -> (Result);
  update_login_reward : (principal) -> (Result);
  update_staking_pool_bitcoin_address : (UpdateBitcoinAddressRequest) -> (
      Result_1,
    );
  update_staking_pool_info : (UpdateStakingPoolInfoRequest) -> (
      UpdateStakingPoolInfoResponse,
    );
  update_staking_pool_status : (UpdateStakingPoolStatusRequest) -> (text);
  update_user_profile : (UserProfileRequest) -> (Result);
  update_wallet_bitcoin_address : (UpdateBitcoinAddressRequest) -> (Result_6);
  upgrade_dbank_wasm : (nat64, principal) -> (Result_3);
  upgrade_staking_pool_wasm : (principal) -> (Result_3);
  wallet_counter : () -> (nat) query;
}
