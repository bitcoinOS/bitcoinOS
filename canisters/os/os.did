type Action = variant { Delete; Create };
type BitcoinNetwork = variant { mainnet; regtest; testnet };
type CreateStakingPoolRequest = record {
  name : text;
  description : text;
  duration_in_day : nat64;
  annual_interest_rate : nat16;
};
type Error = variant {
  StableWriteError : record { msg : text };
  GetStakingPoolAddressFailed : record { msg : text };
  CandidEncodeError : text;
  WalletAlreadyExists : record { wallet_canister : text };
  UnAuthorized : text;
  WalletNotFound : text;
  CreateCanisterFailed : record { msg : text };
  StableSetError : record { msg : text };
  Unknown;
  ConfirmStakingError : text;
  StakingPoolAlreadyExists : record { staking_pool_id : text };
  RedeemedStakingError : text;
};
type InitArgument = record {
  network : BitcoinNetwork;
  steward_canister : principal;
  wallet_cycles : opt nat64;
};
type Metadata = record {
  network : BitcoinNetwork;
  steward_canister : principal;
  wallet_cycles : nat64;
};
type Result = variant { Ok : bool; Err : Error };
type Result_1 = variant { Ok : StakingPoolInfo; Err : Error };
type Result_2 = variant { Ok : principal; Err : Error };
type Result_3 = variant { Ok : nat64; Err : Error };
type Result_4 = variant { Ok; Err : text };
type StakingPoolInfo = record {
  bitcoin_address : text;
  os_canister : principal;
  name : text;
  network : BitcoinNetwork;
  description : text;
  created_at : nat64;
  duration_in_day : nat64;
  staking_pool_canister : principal;
  annual_interest_rate : nat16;
};
type WalletAction = record {
  action : Action;
  operator : principal;
  op_time : nat64;
};
type WalletInfo = record {
  wallet_canister : principal;
  bitcoin_address : text;
  owner : principal;
  name : text;
  network : BitcoinNetwork;
  created_at : nat64;
  steward_canister : principal;
};
service : (InitArgument) -> {
  confirm_staking_record : (principal) -> (Result);
  count_staking_pool : () -> (nat) query;
  count_wallet : () -> (nat64) query;
  create_staking_pool_canister : (CreateStakingPoolRequest) -> (Result_1);
  create_wallet_canister : (text) -> (Result_2);
  get_wallet_action : (nat64) -> (opt WalletAction) query;
  list_staking_pool : () -> (vec StakingPoolInfo) query;
  list_wallet : () -> (vec WalletInfo) query;
  list_wallet_type : () -> (vec text) query;
  metadata : () -> (Metadata) query;
  my_wallets : () -> (vec WalletInfo) query;
  redeemed_staking_record : (principal) -> (Result);
  set_wallet_cycles : (nat64) -> (Result_3);
  timestamp : () -> (nat64) query;
  upgrade_staking_pool_wasm : (principal) -> (Result_4);
  upgrade_wallet_wasm : (principal) -> (Result_4);
  wallet_counter : () -> (nat) query;
}
