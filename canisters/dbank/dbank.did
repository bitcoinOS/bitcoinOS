type AddressType = variant { P2wpkh; P2pkh; P2wsh; P2sh; P2tr };
type BitcoinNetwork = variant { mainnet; regtest; testnet };
type CreateDBankWalletRequest = record {
  wallet_owner : principal;
  name : text;
  seq_in_os : nat64;
};
type CreateWalletEvent = record { wallet_info : DBankWalletInfo };
type DBankError = variant {
  NetworkAlreadyExists;
  RegisterECDSAKeyError;
  ECDSAKeyUpdateError;
  AppendTransferLogError : text;
  StewardCallError : text;
  ECDSAKeyNotFound : text;
  ECDSAKeyAlreadyExists : text;
  WalletAlreadyExists : text;
  UnAuthorized : text;
  WalletNotFound : text;
  WalletError : text;
  CreateWalletError : text;
  ExceededMaxRecipientError : nat8;
  PublicKeyNotFound : text;
};
type DBankWalletInfo = record {
  status : DBankWalletStatus;
  seq_in_bank : nat64;
  bitcoin_address : text;
  public_key : blob;
  owner : principal;
  name : text;
  dbank_canister : principal;
  network : BitcoinNetwork;
  seq_in_os : nat64;
  created_at : nat64;
  steward_canister : principal;
  address_type : AddressType;
  wallet_type : WalletType;
};
type DBankWalletStatus = variant { Inactive; Activing; Forbidden };
type EcdsaCurve = variant { secp256k1 };
type EcdsaKeyId = record { name : text; curve : EcdsaCurve };
type InitDBankArgument = record {
  owner : opt principal;
  name : text;
  network : BitcoinNetwork;
  seq_in_os : nat64;
  steward_canister : principal;
  dbank_id : nat64;
  max_wallet_limit : nat32;
};
type Metadata = record {
  ecdsa_key_id : EcdsaKeyId;
  start_seq_in_os : nat64;
  owner : principal;
  name : text;
  dbank_canister : principal;
  network : BitcoinNetwork;
  steward_canister : principal;
  current_seq_in_os : nat64;
  dbank_id : nat64;
  max_wallet_limit : nat32;
  updated_time : nat64;
  daily_limit_satoshi : nat64;
};
type NetworkResponse = record { network : text };
type Outpoint = record { txid : text; vout : nat32 };
type PublicKeyResponse = record { public_key_hex : text };
type Result = variant { Ok : vec text; Err : DBankError };
type Result_1 = variant { Ok : nat64; Err : DBankError };
type Result_2 = variant { Ok : vec nat64; Err : DBankError };
type Result_3 = variant { Ok : Metadata; Err : DBankError };
type Result_4 = variant { Ok : PublicKeyResponse; Err : DBankError };
type Result_5 = variant { Ok : text; Err : DBankError };
type Result_6 = variant { Ok : vec TransactionLog; Err : DBankError };
type Result_7 = variant { Ok : UtxosResponse; Err : DBankError };
type Result_8 = variant { Ok : vec WalletOperationEvent; Err : DBankError };
type StakingRequest = record {
  staking_address : text;
  memo : opt text;
  stake_type : opt StakingType;
  staking_canister : principal;
  fund_management : opt text;
  amount : nat64;
};
type StakingType = variant { OSWallet; BTCWallet };
type TransactionLog = record {
  txs : vec TransferInfo;
  send_time : nat64;
  sender : principal;
};
type TransferInfo = record { recipient : text; amount : nat64 };
type TransferRequest = record { txs : vec TransferInfo };
type Utxo = record { height : nat32; value : nat64; outpoint : Outpoint };
type UtxoFilter = variant { page : blob; min_confirmations : nat32 };
type UtxosRequest = record { filter : opt UtxoFilter; address : text };
type UtxosResponse = record {
  next_page : opt blob;
  tip_height : nat32;
  tip_block_hash : blob;
  utxos : vec Utxo;
};
type WalletOperationEvent = variant { CreateWallet : CreateWalletEvent };
type WalletType = variant { MultiSig22; Single };
service : (InitDBankArgument) -> {
  addresses : () -> (Result) query;
  balance : (text) -> (Result_1);
  count_wallet : () -> (nat64) query;
  counter : () -> (nat64) query;
  create_p2pkh_wallet : (CreateDBankWalletRequest) -> (text);
  create_p2wpkh_wallet : (CreateDBankWalletRequest) -> (text);
  current_fee_percentiles : () -> (Result_2);
  ecdsa_key : () -> (text) query;
  list_wallet : () -> (vec DBankWalletInfo);
  metadata : () -> (Result_3) query;
  network : () -> (NetworkResponse) query;
  p2pkh_address : () -> (opt text) query;
  p2wpkh_address : () -> (opt text) query;
  p2wsh_multisig22_address : () -> (text) query;
  public_key : (principal) -> (Result_4) query;
  set_steward_canister : (principal) -> (text);
  staking_to_pool : (StakingRequest) -> (Result_5);
  staking_to_pool_from_p2wpkh : (StakingRequest) -> (Result_5);
  staking_to_pool_from_p2wsh_multisig22 : (StakingRequest) -> (Result_5);
  transfer_from_p2pkh : (TransferRequest) -> (Result_5);
  transfer_from_p2wpkh : (TransferRequest) -> (Result_5);
  transfer_from_p2wsh_multisig22 : (TransferRequest) -> (Result_5);
  tx_log_of_index : (nat64) -> (opt TransactionLog) query;
  tx_logs : () -> (Result_6) query;
  utxos : (UtxosRequest) -> (Result_7);
  wallet_log_of_index : (nat64) -> (opt WalletOperationEvent) query;
  wallet_logs : () -> (Result_8) query;
}
