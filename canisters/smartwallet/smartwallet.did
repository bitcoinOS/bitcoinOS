type AddressType = variant { P2wpkh; P2pkh; P2wsh; P2sh; P2tr };
type BitcoinNetwork = variant { mainnet; regtest; testnet };
type EcdsaCurve = variant { secp256k1 };
type EcdsaKeyId = record { name : text; curve : EcdsaCurve };
type InitArgument = record {
  owner : opt principal;
  name : text;
  network : BitcoinNetwork;
  steward_canister : principal;
};
type Metadata = record {
  ecdsa_key_id : EcdsaKeyId;
  owner : principal;
  name : text;
  network : BitcoinNetwork;
  steward_canister : principal;
  updated_time : nat64;
  daily_limit_satoshi : nat64;
};
type NetworkResponse = record { network : text };
type Outpoint = record { txid : text; vout : nat32 };
type PublicKeyResponse = record { public_key_hex : text };
type RawWallet = record {
  witness_script : blob;
  derivation_path : vec blob;
  address : text;
  wallet_type : WalletType;
};
type Result = variant { Ok : vec text; Err : WalletError };
type Result_1 = variant { Ok : nat64; Err : WalletError };
type Result_10 = variant { Ok : bool; Err : WalletError };
type Result_11 = variant { Ok : UtxosResponse; Err : WalletError };
type Result_2 = variant { Ok : opt StakingRecord; Err : WalletError };
type Result_3 = variant { Ok : vec nat64; Err : WalletError };
type Result_4 = variant { Ok : text; Err : WalletError };
type Result_5 = variant { Ok : vec StakingRecord; Err : WalletError };
type Result_6 = variant { Ok : vec TransactionLog; Err : WalletError };
type Result_7 = variant { Ok : Metadata; Err : WalletError };
type Result_8 = variant { Ok : principal; Err : WalletError };
type Result_9 = variant { Ok : PublicKeyResponse; Err : WalletError };
type SelfCustodyKey = record {
  owner : principal;
  network : BitcoinNetwork;
  steward_canister : principal;
  address_type : AddressType;
  wallet_type : WalletType;
};
type StakingRecord = record {
  status : StakingStatus;
  redeemed_txid : opt text;
  sender_address : text;
  staking_address : text;
  txid : text;
  network : BitcoinNetwork;
  sender : principal;
  duration_in_day : nat64;
  actual_amount : nat64;
  staking_canister : principal;
  sent_time : nat64;
  sent_amount : nat64;
  sender_canister : principal;
  updated_time : nat64;
  annual_interest_rate : nat16;
};
type StakingRequest = record {
  staking_address : text;
  staking_canister : principal;
  amount : nat64;
};
type StakingStatus = variant { Redeemed; Redeeming; Confirmed; Pending };
type TotalStakingRequest = record {
  sender_address : text;
  staking_canister : principal;
};
type TransactionLog = record {
  txs : vec TransferInfo;
  send_time : nat64;
  sender : principal;
};
type TransferInfo = record { recipient : text; amount : nat64 };
type TransferRequest = record { txs : vec TransferInfo };
type Utxo = record { height : nat32; value : nat64; outpoint : Outpoint };
type UtxoFilter = variant { page : blob; min_confirmations : nat32 };
type UtxosRequest = record { filter : opt UtxoFilter; address : text };
type UtxosResponse = record {
  next_page : opt blob;
  tip_height : nat32;
  tip_block_hash : blob;
  utxos : vec Utxo;
};
type WalletError = variant {
  NetworkAlreadyExists;
  StakingRecordAlreadyExists : text;
  RegisterECDSAKeyError;
  ECDSAKeyUpdateError;
  AppendTransferLogError : text;
  StewardCallError : text;
  ECDSAKeyNotFound : text;
  ECDSAKeyAlreadyExists : text;
  RegisterStakingRecordError : text;
  WalletAlreadyExists : text;
  UnAuthorized : text;
  WalletNotFound : text;
  WalletError : text;
  CreateWalletError : text;
  ExceededMaxRecipientError : nat8;
  StakingRecordCantUpdate : text;
  SyncStakingRecordError : text;
  OnlySupportP2pkhSign;
  InsufficientFunds;
  StakingRecordNotFound : text;
};
type WalletType = variant { MultiSig22; Single };
service : (InitArgument) -> {
  addresses : () -> (Result) query;
  balance : (text) -> (Result_1);
  confirm_staking_record_one : (text) -> (Result_2);
  counter : () -> (nat) query;
  current_fee_percentiles : () -> (Result_3);
  ecdsa_key : () -> (Result_4) query;
  get_staking : (text) -> (Result_2) query;
  list_staking : () -> (Result_5) query;
  list_wallet : () -> (vec record { SelfCustodyKey; RawWallet });
  logs : () -> (Result_6) query;
  metadata : () -> (Result_7) query;
  network : () -> (NetworkResponse) query;
  owner : () -> (Result_8) query;
  p2pkh_address : () -> (text);
  p2wsh_multisig22_address : () -> (text);
  public_key : () -> (Result_9);
  set_steward_canister : (principal) -> (Result_4);
  staking_to_pool : (StakingRequest) -> (Result_4);
  staking_to_pool_from_p2wsh_multisig22 : (StakingRequest) -> (Result_4);
  sync_staking_record_status : (text) -> (Result_10);
  total_staking : (TotalStakingRequest) -> (Result_1) query;
  transfer_from_p2pkh : (TransferRequest) -> (Result_4);
  transfer_from_p2wsh_multisig22 : (TransferRequest) -> (Result_4);
  utxos : (UtxosRequest) -> (Result_11);
}
